Solution - ADO.NET,API Ekle

Controllers - sağ tık, Controller ekle - ProductsController: ControllerBase


- Bir controller'ın controller olabilmesi için ControllerBase'den inherite edilmesi ve [Api Controller] attribute'unu alması lazım. Attribute bir classla ilgili bilgi varme
bir imzalama yöntemi.-
-Route ise bize nasıl istekte bulunacaklar onu gösteriyor.-

Product Controller - Add Reference to : Business, Core, DataAccess, Entities
[HttpGet]
public List<Product> Get()
{
return new Product{ProductId=1, ProductName="Elma"},
       new Product{ProductId=2, ProductName="Armut"}
};

Postman - https://localhost:44337/api/products yapıştır.

Önce kötü kod yazıyoruz. Bağımlılık yaratıcı kod(dependency chain). ProductService'i newle.
public List<Product> Get()
{
   IProductService productService = new ProductManager(new EfProductDal());
   var Result = productService.GetAll();
   return result.Data;
}

Bizim istediğimiz şey loosly coupled. Bu sebeple ctor injection yapacağız.Sonra da IoC Container.
     IProductService _productService;

        public ProductsController(IProductService productService)
        {
             _productService = productService;
        }

IoC Container: Biri senden IProductService isterse arka planda ProductManager oluştur onu ver. Arka planda sizin yerinize newliyor. 
Singleton bir tane obje oluşturuyor 1000 tane müşteri gelse de hepsine aynısını veriyor. 
.NET'in IoC containerı yerine neden Autofac kullanıyoruz. Çünkü bize AOP imkanı veriyor.

Program.cs'e şu kodları yaz:
        builder.Services.AddSingleton <IProductService,ProductManager>();
        builder.Services.AddSingleton<IProductDal, EfProductDal>();



Şimdi resultları ekle.
 [HttpGet]
        public IActionResult Get()
        {
            
            
            var result = _productService.GetAll();
            if (result.Success)
            {
                return Ok(result);
            }
            return BadRequest(result);
            

        }

Şimdi Post'u yaz.
    [HttpPost]
        public IActionResult Post(Product product)
        {
            var result = _productService.Add(product);
            if (result.Success) 
            {
                return Ok(result);
            }
            return BadRequest(result);
        }
Postman'de ayarlayıp - ürünü gir - productid'sini yazma, süslü parantezleri unutma.
 
        {
            
            "categoryId": 1,
            "productName": "Bardak",
            "unitsInStock":45,
            "unitPrice": 15.0000
        }


 [HttpGet]  [HttpPost] birden fazla kullacağın için bunları bunların içerisine isim/alias ver. 
 Ör: [HttpGet("getbyid")], [HttpPost("add")]

 Sonra burada verdiğin metod aliasını da bu aliasa göre düzeltebilirsin.
 public IActionResult Get()'tı bunu public IActionResult GetById() yap mesela.


 Postmande çağırırken şöyle: ÖR: https://localhost:44337/api/products/getbyid ya da https://localhost:44337/api/products/getall

 ------------------------------------------------------------------------------------------------------------------------------

 Autofac - 12.Video 
 IoC yapılandırmasını business'da değil de biraz daha backendde yapmak daha avantajlı. Çünkü bir tane daha API ekledik diyelim o zaman da kullanmak istersek Business içerisinde olsa daha iyi.

 Business - Nuget - Autofac'i ve Autofa.Extras'ı indir. 

 DependencyResolvers Dosyası oluştur.

 Autofac dosyası oluştur. İçine AutofacBusinessModule class'ı aç.

 AutofacBusinessModule: Module, implemente et.

 Override yaz tap tap, içini sil içine şu kodu yapıştır:

            builder.RegisterType<ProductManager>().As<IProductService>().SingleInstance(); //biri senden iproductservice isterse ona productmanager instance'ı ver demek bu.
            builder.RegisterType<EfProductDal>().As<IProductDal>().SingleInstance();
 
Sonra program.cs'ye gel. .Net'in IoC'unu değil, Autofac'in IoC'unu kullanacağını söylediğin kod bu.
Şu kodu yapıştır.
 
 var builder = WebApplication.CreateBuilder(args);

builder.Host.UseServiceProviderFactory(new AutofacServiceProviderFactory());
builder.Host.ConfigureContainer<ContainerBuilder>(builder => builder.RegisterModule(new AutofacBusinessModule()));
 
AutofacServiceProviderFactory'e sağ tıklayıp Install package'lı olan seçeneği seç.

Validation - 
Business koduyla validation kodu farklı şeyler. (doğrulama kodu ne, iş kodu ne? - ikisi farklıdır, birbiri yerine kullanılmaz)
Doğrulama, bir nesnenin iş kurallarına dahil etmeden önce yapısal olarak uygun olup olmadığını kontrol etmek için kullanılır.
Mesela ProductName'in uzunluğu 2 karakterden küçükse ekleme yapma bir validasyon kuralı.

Business altında ValidationRules diye bir klasör oluştur. ValidationRules içinde FluentValidation diye bir klasör aç.

Business - Nuget -FluentValidation install.

FluentValidation - add class - public class ProductValidator: AbstractValidator<Product> 
AbstractValidator FluentValidation'dan geliyor ampülden çöz, Product'ı Entities'den çöz.

ctor injection

public ProductValidator()
{
Rulefor(p => p.ProductName).MinimumLength(2); // p'nin productname'nin minumumlength'i iki karakter olmalıdır kuralını bu şekilde yazıyoruz. 
RuleFor(p => p.UnitPrice).GreaterThanOrEqualTo(10).When(p => p.CategoryId ==1);
}

Olmayan bir şeyi yazmak -
RuleFor(p => p.ProductName).Must(StartWithA);
StartWithA'in altı çizilir, sağ tıkla generate method.

 private bool StartWithA(string arg)
        {
            return arg.StartsWith("A"); //A ile başlıyorsa true döner. // arg sana gönderilen product.
        }

 
 ProductManager'a gel(validation kodlarını çalıştırmak için.)
 
 
 
 
 
 
 
 
 
 
 
